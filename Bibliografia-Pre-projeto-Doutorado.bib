%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/

%% Created for Armando Soares Sousa at 2017-11-05 21:00:25 -0300 


%% Saved with string encoding Unicode (UTF-8) 


@comment{jabref-meta: databaseType:bibtex;}



@article{Allman:2012:MTD:2160718.2160733,
	Acmid = {2160733},
	Address = {New York, NY, USA},
	Author = {Allman, Eric},
	Date-Added = {2017-11-05 23:41:39 +0000},
	Date-Modified = {2017-11-05 23:41:39 +0000},
	Doi = {10.1145/2160718.2160733},
	Issn = {0001-0782},
	Issue_Date = {May 2012},
	Journal = {Commun. ACM},
	Month = may,
	Number = {5},
	Numpages = {6},
	Pages = {50--55},
	Publisher = {ACM},
	Title = {Managing Technical Debt},
	Url = {http://doi.acm.org/10.1145/2160718.2160733},
	Volume = {55},
	Year = {2012},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/2160718.2160733},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2160718.2160733}}

@inbook{Filho2017,
	Abstract = {Exception handling is a common error recovery technique employed to improve software robustness. However, studies have reported that exception handling is commonly neglected by developers and is the least understood and documented part of a software project. The lack of documentation and difficulty in understanding the exception handling design can lead developers to violate important design decisions, triggering an erosion process in the exception handling design. Architectural conformance checking provides means to control the architectural erosion by periodically checking if the actual architecture is consistent with the planned one. Nevertheless, available approaches do not provide a proper support for exception handling conformance checking. To fulfill this gap, we propose ArCatch: an architectural conformance checking solution to deal with the exception handling design erosion. ArCatch provides: (i) a declarative language for expressing design constraints regarding exception handling; and (ii) a design rule checker to automatically verify the exception handling conformance. To evaluate the usefulness and effectiveness of our approach, we conducted a case study, in which we evaluated an evolution scenario composed by 10 versions of an existing web-based Java system. Each version was checked against the same set of exception handling design rules. Based on the results and the feedback given by the system's architect, the ArCatch proved useful and effective in the identification of existing exception handling erosion problems and locating its causes in the source code.},
	Address = {Cham},
	Author = {Filho, Juarez L. M. and Rocha, Lincoln and Andrade, Rossana and Britto, Ricardo},
	Booktitle = {Software Architecture: 11th European Conference, ECSA 2017, Canterbury, UK, September 11-15, 2017, Proceedings},
	Date-Added = {2017-11-05 23:39:37 +0000},
	Date-Modified = {2017-11-05 23:39:37 +0000},
	Doi = {10.1007/978-3-319-65831-5_5},
	Editor = {Lopes, Ant{\'o}nia and de Lemos, Rog{\'e}rio},
	Isbn = {978-3-319-65831-5},
	Pages = {67--83},
	Publisher = {Springer International Publishing},
	Title = {Preventing Erosion in Exception Handling Design Using Static-Architecture Conformance Checking},
	Url = {https://doi.org/10.1007/978-3-319-65831-5_5},
	Year = {2017},
	Bdsk-Url-1 = {https://doi.org/10.1007/978-3-319-65831-5_5},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/978-3-319-65831-5_5}}

@article{Minku2016,
	Abstract = {The field of data mining for software engineering has been growing over the last decade. This field is concerned with the use of data mining to provide useful insights into how to improve software engineering processes and software itself, supporting decision-making. For that, data produced by software engineering processes and products during and after software development are used. Despite promising results, there is frequently a lack of discussion on the role of software engineering practitioners amidst the data mining approaches. This makes adoption of data mining by software engineering practitioners difficult. Moreover, the fact that experts' knowledge is frequently ignored by data mining approaches, together with the lack of transparency of such approaches, can hinder the acceptability of data mining by software engineering practitioners. To overcome these problems, this position paper provides a discussion of the role of software engineering experts when adopting data mining approaches. It also argues that this role can be extended to increase experts' involvement in the process of building data mining models. We believe that such extended involvement is not only likely to increase software engineers' acceptability of the resulting models, but also improve the models themselves. We also provide some recommendations aimed at increasing the success of experts involvement and model acceptability.},
	Author = {Minku, Leandro L. and Mendes, Emilia and Turhan, Burak},
	Date-Added = {2017-11-05 23:38:31 +0000},
	Date-Modified = {2017-11-05 23:38:31 +0000},
	Day = {01},
	Doi = {10.1007/s13748-016-0092-2},
	Issn = {2192-6360},
	Journal = {Progress in Artificial Intelligence},
	Month = {Nov},
	Number = {4},
	Pages = {307--314},
	Title = {Data mining for software engineering and humans in the loop},
	Url = {https://doi.org/10.1007/s13748-016-0092-2},
	Volume = {5},
	Year = {2016},
	Bdsk-Url-1 = {https://doi.org/10.1007/s13748-016-0092-2},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/s13748-016-0092-2}}

@article{Alves2016100,
	Author = {Nicolli S.R. Alves and Thiago S. Mendes and Manoel G. de Mendon{\c c}a and Rodrigo O. Sp{\'\i}nola and Forrest Shull and Carolyn Seaman},
	Doi = {https://doi.org/10.1016/j.infsof.2015.10.008},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Technical debt, Software maintenance, Software engineering, Systematic mapping},
	Pages = {100 - 121},
	Title = {Identification and management of technical debt: A systematic mapping study},
	Url = {https://www.sciencedirect.com/science/article/pii/S0950584915001743},
	Volume = {70},
	Year = {2016},
	Bdsk-Url-1 = {https://www.sciencedirect.com/science/article/pii/S0950584915001743},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2015.10.008}}

@inbook{Lehman1996,
	Abstract = {Data obtained during a 1968 study of the software process [8] led to an investigation of the evolution of OS/360 [13] and and, over a period of twenty years, to formulation of eight Laws of Software Evolution. The FEAST project recently initiated (see sections 4--6 below) is expected to throw additional light on the phenomenology underlying these laws, to increase understanding of them, to explore their finer detail, to expose their wider relevance and implications and to develop means for their beneficial exploitation. This paper is intended to trigger wider interest in the laws and in the FEAST study of feedback and feedback control in the context of the software process and its improvement to ensure beneficial exploitation of their potential.},
	Address = {Berlin, Heidelberg},
	Author = {Lehman, M. M.},
	Booktitle = {Software Process Technology: 5th European Workshop, EWSPT '96 Nancy, France, October 9--11, 1996 Proceedings},
	Doi = {10.1007/BFb0017737},
	Editor = {Montangero, Carlo},
	Isbn = {978-3-540-70676-2},
	Pages = {108--124},
	Publisher = {Springer Berlin Heidelberg},
	Title = {Laws of software evolution revisited},
	Url = {https://doi.org/10.1007/BFb0017737},
	Year = {1996},
	Bdsk-Url-1 = {https://doi.org/10.1007/BFb0017737},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/BFb0017737}}

@mastersthesis{Juarez2016Arcatch,
	Abstract = {Exception handling is a common error recovery technique employed to improve software robustness. However, studies have reported that exception handling is commonly neglected by developers and is the least understood and documented part of a software project. The lack of documentation and difficulty in understanding the exception handling design can lead developers to violate important design decisions, triggering an erosion process in the exception handling design. Architectural conformance checking provides means to control the architectural erosion by periodically checking if the actual architecture is consistent with the planned one. Nevertheless, available approaches do not provide a proper support for exception handling conformance checking. To fulfill this gap, this work proposes ArCatch: an architectural conformance checking solution to deal with the exception handling design erosion. ArCatch provides: (i) a declarative domain-specific language for expressing design constraints regarding exception handling; and (ii) a design rule checker to automatically verify the exception handling conformance. The usefulness and effectiveness of the approach was evaluated in an evolution scenario composed by 10 versions of an existing web-based Java system. Each version was checked against the same set of exception handling design rules. Based on the results and the feedback given by the system's software architect, the ArCatch proved useful and effective in the identification of existing exception handling erosion problems and locating its causes in the source code.},
	Author = {Meneses Filho, Juarez de Lima},
	School = {Universidade Federal do Cear{\'a}},
	Title = {ArCatch: uma solu{\c c}{\~a}o para verifica{\c c}{\~a}o est{\'a}tica de conformidade arquitetural do tratamento de exce{\c c}{\~a}o},
	Type = {mathesis},
	Url = {http://www.repositorio.ufc.br/handle/riufc/24751},
	Year = {2016},
	Bdsk-Url-1 = {http://www.repositorio.ufc.br/handle/riufc/24751}}

@article{295895,
	Abstract = {Given the central role that software development plays in the delivery and application of information technology, managers are increasingly focusing on process improvement in the software development area. This demand has spurred the provision of a number of new and/or improved approaches to software development, with perhaps the most prominent being object-orientation (OO). In addition, the focus on process improvement has increased the demand for software measures, or metrics with which to manage the process. The need for such metrics is particularly acute when an organization is adopting a new technology for which established practices have yet to be developed. This research addresses these needs through the development and implementation of a new suite of metrics for OO design. Metrics developed in previous research, while contributing to the field's understanding of software development processes, have generally been subject to serious criticisms, including the lack of a theoretical base. Following Wand and Weber (1989), the theoretical base chosen for the metrics was the ontology of Bunge (1977). Six design metrics are developed, and then analytically evaluated against Weyuker's (1988) proposed set of measurement principles. An automated data collection tool was then developed and implemented to collect an empirical sample of these metrics at two field sites in order to demonstrate their feasibility and suggest ways in which managers may use these metrics for process improvement},
	Author = {S. R. Chidamber and C. F. Kemerer},
	Doi = {10.1109/32.295895},
	Issn = {0098-5589},
	Journal = {IEEE Transactions on Software Engineering},
	Keywords = {object-oriented methods;object-oriented programming;software metrics;automated data collection tool;measurement principles;metrics suite;object oriented design;object oriented programming;organization;process improvement;software development;software measures;Application software;Engineering management;Information management;Information technology;Ontologies;Programming;Software development management;Software engineering;Software measurement;Technology management},
	Month = {Jun},
	Number = {6},
	Pages = {476-493},
	Title = {A metrics suite for object oriented design},
	Volume = {20},
	Year = {1994},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/32.295895}}

@article{Maffort2016,
	Abstract = {Software architecture conformance is a key software quality control activity that aims to reveal the progressive gap normally observed between concrete and planned software architectures. However, formally specifying an architecture can be difficult, as it must be done by an expert of the system having a high level understanding of it. In this paper, we present a lightweighted approach for architecture conformance based on a combination of static and historical source code analysis. The proposed approach relies on four heuristics for detecting absences (something expected was not found) and divergences (something prohibited was found) in source code based architectures. We also present an architecture conformance process based on the proposed approach. We followed this process to evaluate the architecture of two industrial-strength information systems, achieving an overall precision of 62.7 {\%} and 53.8 {\%}. We also evaluated our approach in an open-source information retrieval library, achieving an overall precision of 59.2 {\%}. We envision that an heuristic-based approach for architecture conformance can be used to rapidly raise architectural warnings, without deeply involving experts in the process.},
	Author = {Maffort, Cristiano and Valente, Marco Tulio and Terra, Ricardo and Bigonha, Mariza and Anquetil, Nicolas and Hora, Andr{\'e}},
	Day = {01},
	Doi = {10.1007/s10664-014-9348-2},
	Issn = {1573-7616},
	Journal = {Empirical Software Engineering},
	Month = {Jun},
	Number = {3},
	Pages = {854--895},
	Title = {Mining architectural violations from version history},
	Url = {https://doi.org/10.1007/s10664-014-9348-2},
	Volume = {21},
	Year = {2016},
	Bdsk-Url-1 = {https://doi.org/10.1007/s10664-014-9348-2},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/s10664-014-9348-2}}

@book{series/utcs/OquendoLB16,
	Added-At = {2016-10-27T00:00:00.000+0200},
	Author = {Oquendo, Fl{\'a}vio and Leite, Jair C. and Batista, Tha{\'\i}s},
	Biburl = {https://www.bibsonomy.org/bibtex/213aac69e490c970367fadf0aff4f97f9/dblp},
	Ee = {http://dx.doi.org/10.1007/978-3-319-44339-3},
	Interhash = {59d69ac809c8b1896758bf1770f07f5e},
	Intrahash = {13aac69e490c970367fadf0aff4f97f9},
	Isbn = {978-3-319-44339-3},
	Keywords = {dblp},
	Pages = {3-234},
	Publisher = {Springer},
	Series = {Undergraduate Topics in Computer Science},
	Timestamp = {2016-10-28T11:33:43.000+0200},
	Title = {Software Architecture in Action - Designing and Executing Architectural Models with SysADL grounded on the OMG SysML Standard},
	Year = {2016}}

@article{iso42010,
	Abstract = {ISO/IEC/IEEE 42010:2011 addresses the creation, analysis and sustainment of architectures of systems through the use of architecture descriptions. A conceptual model of architecture description is established. The required contents of an architecture description are specified. Architecture viewpoints, architecture frameworks and architecture description languages are introduced for codifying conventions and common practices of architecture description. The required content of architecture viewpoints, architecture frameworks and architecture description languages is specified. Annexes provide the motivation and background for key concepts and terminology and examples of applying ISO/IEC/IEEE 42010:2011.},
	Added-At = {2012-07-23T10:05:31.000+0200},
	Author = {ISO/IEC/IEEE},
	Biburl = {https://www.bibsonomy.org/bibtex/27f1bf1f6675a8d557d76347a3411f76f/stammel},
	Doi = {10.1109/IEEESTD.2011.6129467},
	Interhash = {e96b79e49ee2e838643b5457da531198},
	Intrahash = {7f1bf1f6675a8d557d76347a3411f76f},
	Journal = {ISO/IEC/IEEE 42010:2011(E) (Revision of ISO/IEC 42010:2007 and IEEE Std 1471-2000)},
	Keywords = {architecture iec ieee iso software standard},
	Month = {1},
	Pages = {1 -46},
	Timestamp = {2012-07-23T10:06:24.000+0200},
	Title = {Systems and software engineering -- Architecture description},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/IEEESTD.2011.6129467}}

@phdthesis{Terra2013USRPREAS,
	Abstract = {Architectural erosion is a recurrent problem faced by software architects. Although several architecture conformance techniques have been proposed to detect architectural violations (e.g., reflexion models, dependency structure matrices, source code query languages, constraint languages, architecture description languages, and design tests), less research effort has been dedicated to the task of repairing such violations. As a consequence, developers usually perform the repairing task in ad hoc ways, without tool support at the architectural level. This fact may lead developers to spend a long time to discover how to repair the architectural violations and even to introduce new violations when repairing one. In view of such circumstances, this thesis proposes an architectural repair recommendation system that provides fixing guidelines for developers and maintainers when tackling architectural erosion. We have formalized a catalog of repairing recommendations to repair violations raised by static architecture conformance checking approaches; we have elaborated a suitable module heuristic to determine the correct module for source code entities; we have designed a toolcalled ArchFixthat triggers the proposed recommendations; and we have evaluated the application of our approach in two industrial-strength systems. For the first systema 21 KLOC open-source strategic management systemour approach indicated correct repairing recommendations for 31 out of 41 violations detected as the result of an architecture conformance process. For the second systema 728 KLOC customer care system used by a major telecommunication companyour approach triggered correct recommendations for 632 out of 787 violations, as asserted by the systems architect. Moreover, the architects scored 80% of these recommendations as having moderate or major complexity.},
	Author = {Ricardo Terra},
	Keywords = {Eros{\~a}o arquitetural, Repara{\c c}{\~a}o arquitetural, Sistema de recomenda{\c c}{\~a}o},
	School = {Universidade Federal de Minas Gerais},
	Title = {Um sistema de recomenda{\c c}{\~a}o para repara{\c c}{\~a}o de eros{\~a}o arquitetural de software = A recommendation system for repairing software architecture erosion},
	Type = {phdthesis},
	Year = {2013}}

@article{miranda2016architecture,
	Author = {Miranda, Sergio and Rodrigues Jr, Elder and Valente, Marco Tulio and Terra, Ricardo},
	Journal = {Journal of Object Technology},
	Number = {3},
	Pages = {1--1},
	Title = {Architecture Conformance Checking in Dynamically Typed Languages.},
	Volume = {15},
	Year = {2016}}

@phdthesis{Monteiro2014EAP,
	Author = {Jo{\~a}o Arthur Brunet Monteiro},
	School = {Universidade Federal de Campina Grande},
	Title = {Eros{\~a}o Arquitetural em Perspectiva: Um estudo sobre regras arquiteturais, suas viola{\c c}{\~o}es e como os desenvolvedores lidam com o problema},
	Type = {phdthesis},
	Year = {2014}}

@inproceedings{montandon2012apiminer,
	Author = {Montandon, Jo{\~a}o Eduardo and Valente, Marco T{\'u}lio},
	Booktitle = {III Congresso Brasileiro de Software: Teoria e Pr{\'a}tica (Sess{\~a}o de Ferramentas)},
	Pages = {51--56},
	Title = {APIMiner: Uma plataforma para recomenda{\c c}{\~a}o de exemplos de uso de APIs},
	Year = {2012}}

@book{kerievsky2005refactoring,
	Author = {Kerievsky, Joshua},
	Publisher = {Pearson Deutschland GmbH},
	Title = {Refactoring to patterns},
	Year = {2005}}

@article{MARTINI2015237,
	Abstract = {Abstract A known problem in large software companies is to balance the prioritization of short-term with long-term feature delivery speed. Specifically, Architecture Technical Debt is regarded as sub-optimal architectural solutions taken to deliver fast that might hinder future feature development, which, in turn, would hinder agility. This paper aims at improving software management by shedding light on the current factors responsible for the accumulation of Architectural Technical Debt and to understand how it evolves over time. We conducted an exploratory multiple-case embedded case study in 7 sites at 5 large companies. We evaluated the results with additional cross-company interviews and an in-depth, company-specific case study in which we initially evaluate factors and models. We compiled a taxonomy of the factors and their influence in the accumulation of Architectural Technical Debt, and we provide two qualitative models of how the debt is accumulated and refactored over time in the studied companies. We also list a set of exploratory propositions on possible refactoring strategies that can be useful as insights for practitioners and as hypotheses for further research. Several factors cause constant and unavoidable accumulation of Architecture Technical Debt, which leads to development crises. Refactorings are often overlooked in prioritization and they are often triggered by development crises, in a reactive fashion. Some of the factors are manageable, while others are external to the companies. ATD needs to be made visible, in order to postpone the crises according to the strategic goals of the companies. There is a need for practices and automated tools to proactively manage ATD.},
	Author = {Antonio Martini and Jan Bosch and Michel Chaudron},
	Doi = {https://doi.org/10.1016/j.infsof.2015.07.005},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Architectural Technical Debt, Software management, Software architecture, Agile software development, Software life-cycle, Qualitative model},
	Number = {Supplement C},
	Pages = {237 - 253},
	Title = {Investigating Architectural Technical Debt accumulation and refactoring over time: A multiple-case study},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584915001287},
	Volume = {67},
	Year = {2015},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584915001287},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2015.07.005}}

@inproceedings{Martini:2015:DAT:2867551.2868159,
	Acmid = {2868159},
	Address = {Washington, DC, USA},
	Author = {Martini, Antonio and Bosch, Jan},
	Booktitle = {Proceedings of the 2015 12th Working IEEE/IFIP Conference on Software Architecture},
	Doi = {10.1109/WICSA.2015.31},
	Isbn = {978-1-4799-1922-2},
	Keywords = {architectural technical debt, agile software development, effort, socio-technical phenomena, multiple case-study, qualitative model},
	Numpages = {10},
	Pages = {1--10},
	Publisher = {IEEE Computer Society},
	Series = {WICSA '15},
	Title = {The Danger of Architectural Technical Debt: Contagious Debt and Vicious Circles},
	Url = {http://dx.doi.org/10.1109/WICSA.2015.31},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/WICSA.2015.31}}

@inproceedings{nord2012search,
	Author = {Nord, Robert L and Ozkaya, Ipek and Kruchten, Philippe and Gonzalez-Rojas, Marco},
	Booktitle = {Software Architecture (WICSA) and European Conference on Software Architecture (ECSA), 2012 Joint Working IEEE/IFIP Conference on},
	Organization = {IEEE},
	Pages = {91--100},
	Title = {In search of a metric for managing architectural technical debt},
	Year = {2012}}

@inproceedings{Brown:2010:MTD:1882362.1882373,
	Acmid = {1882373},
	Address = {New York, NY, USA},
	Author = {Brown, Nanette and Cai, Yuanfang and Guo, Yuepu and Kazman, Rick and Kim, Miryung and Kruchten, Philippe and Lim, Erin and MacCormack, Alan and Nord, Robert and Ozkaya, Ipek and Sangwan, Raghvinder and Seaman, Carolyn and Sullivan, Kevin and Zazworka, Nico},
	Booktitle = {Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research},
	Doi = {10.1145/1882362.1882373},
	Isbn = {978-1-4503-0427-6},
	Keywords = {cost-benefit analysis, design decision trade-off, large-scale system development, software metrics, technical debt},
	Location = {Santa Fe, New Mexico, USA},
	Numpages = {6},
	Pages = {47--52},
	Publisher = {ACM},
	Series = {FoSER '10},
	Title = {Managing Technical Debt in Software-reliant Systems},
	Url = {http://doi.acm.org/10.1145/1882362.1882373},
	Year = {2010},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1882362.1882373},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1882362.1882373}}

@inproceedings{Schmid:2013:FAT:2465478.2465492,
	Acmid = {2465492},
	Address = {New York, NY, USA},
	Author = {Schmid, Klaus},
	Booktitle = {Proceedings of the 9th International ACM Sigsoft Conference on Quality of Software Architectures},
	Doi = {10.1145/2465478.2465492},
	Isbn = {978-1-4503-2126-6},
	Keywords = {Cost Estimation, Decision Making, Formal Model, Incremental Development, Software Systems, Technical Debt},
	Location = {Vancouver, British Columbia, Canada},
	Numpages = {10},
	Pages = {153--162},
	Publisher = {ACM},
	Series = {QoSA '13},
	Title = {A Formal Approach to Technical Debt Decision Making},
	Url = {http://doi.acm.org/10.1145/2465478.2465492},
	Year = {2013},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/2465478.2465492},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2465478.2465492}}

@inproceedings{Gurgel:2014:BRR:2577080.2577087,
	Acmid = {2577087},
	Address = {New York, NY, USA},
	Author = {Gurgel, Alessandro and Macia, Isela and Garcia, Alessandro and von Staa, Arndt and Mezini, Mira and Eichberg, Michael and Mitschke, Ralf},
	Booktitle = {Proceedings of the 13th International Conference on Modularity},
	Doi = {10.1145/2577080.2577087},
	Isbn = {978-1-4503-2772-5},
	Keywords = {architectural degradation, design rules, reuse},
	Location = {Lugano, Switzerland},
	Numpages = {12},
	Pages = {61--72},
	Publisher = {ACM},
	Series = {MODULARITY '14},
	Title = {Blending and Reusing Rules for Architectural Degradation Prevention},
	Url = {http://doi.acm.org/10.1145/2577080.2577087},
	Year = {2014},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/2577080.2577087},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2577080.2577087}}

@inproceedings{bang2017continuous,
	Author = {Bang, Jae Young and Brun, Yuriy and Medvidovic, Nenad},
	Booktitle = {Software Architecture (ICSA), 2017 IEEE International Conference on},
	Organization = {IEEE},
	Pages = {97--106},
	Title = {Continuous Analysis of Collaborative Design},
	Year = {2017}}

@article{BESKER20181,
	Abstract = {Abstract Large Software Companies need to support the continuous and fast delivery of customer value in both the short and long term. However, this can be impeded if the evolution and maintenance of existing systems is hampered by what has been recently termed Technical Debt (TD). Specifically, Architectural TD has received increased attention in the last few years due to its significant impact on system success and, left unchecked, it can cause expensive repercussions. It is therefore important to understand the underlying factors of architectural TD. With this as background, there is a need for a descriptive model to illustrate and explain different architectural TD issues. The aim of this study is to synthesize and compile research efforts with the goal of creating new knowledge with a specific interest in the architectural TD field. The contribution of this paper is the presentation of a novel descriptive model, providing a comprehensive interpretation of the architectural TD phenomenon. This model categorizes the main characteristics of architectural TD and reveals their relations. The results show that, by using this model, different stakeholders could increase the system's success rate, and lower the rate of negative consequences, by raising awareness about architectural TD.},
	Author = {Terese Besker and Antonio Martini and Jan Bosch},
	Doi = {https://doi.org/10.1016/j.jss.2017.09.025},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Systematic literature review, Architectural technical debt, Software maintenance, Software architecture},
	Number = {Supplement C},
	Pages = {1 - 16},
	Title = {Managing architectural technical debt: A unified model and systematic literature review},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121217302121},
	Volume = {135},
	Year = {2018},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121217302121},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2017.09.025}}

@article{MOHAN2016183,
	Abstract = {Abstract Software refactoring has been recognized as a valuable process during software development and is often aimed at repaying technical debt. Technical debt arises when a software product has been built or amended without full care for structure and extensibility. Refactoring is useful to keep technical debt low and if it can be automated there are obvious efficiency benefits. Using a combination of automated refactoring techniques, software metrics and metaheuristic searches, an automated refactoring tool can improve the structure of a software system without affecting its functionality. In this paper, four different refactoring approaches are compared using an automated software refactoring tool. Weighted sums of metrics are used to form different fitness functions that drive the search process towards certain aspects of software quality. Metrics are combined to measure coupling, abstraction and inheritance and a fourth fitness function is proposed to measure reduction in technical debt. The 4 functions are compared against each other using 3 different searches on 6 different open source programs. Four out of the 6 programs show a larger improvement in the technical debt function after the search based refactoring process. The results show that the technical debt function is useful for assessing improvement in quality.},
	Author = {Michael Mohan and Des Greer and Paul McMullan},
	Doi = {https://doi.org/10.1016/j.jss.2016.05.019},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Search based software engineering, Automated refactoring, Refactoring tools, Technical debt, Software metrics, Simulated annealing},
	Number = {Supplement C},
	Pages = {183 - 194},
	Title = {Technical debt reduction using search based automated refactoring},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121216300541},
	Volume = {120},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121216300541},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2016.05.019}}

@article{MACCORMACK2016170,
	Abstract = {Abstract Technical Debt is created when design decisions that are expedient in the short term increase the costs of maintaining and adapting this system in future. An important component of technical debt relates to decisions about system architecture. As systems grow and evolve, their architectures can degrade, increasing maintenance costs and reducing developer productivity. This raises the question if and when it might be appropriate to redesign (``refactor'') a system, to reduce what has been called ``architectural debt''. Unfortunately, we lack robust data by which to evaluate the relationship between architectural design choices and system maintenance costs, and hence to predict the value that might be released through such refactoring efforts. We address this gap by analyzing the relationship between system architecture and maintenance costs for two software systems of similar size, but with very different structures; one has a ``Hierarchical'' design, the other has a ``Core-Periphery'' design. We measure the level of system coupling for the 20,000+ components in each system, and use these measures to predict maintenance efforts, or ``defect-related activity.'' We show that in both systems, the tightly-coupled Core or Central components cost significantly more to maintain then loosely-coupled Peripheral components. In essence, a small number of components generate a large proportion of system costs. However, we find major differences in the potential benefits available from refactoring these systems, related to their differing designs. Our results generate insight into how architectural debt can be assessed by understanding patterns of coupling among components in a system.},
	Author = {Alan MacCormack and Daniel J. Sturtevant},
	Doi = {https://doi.org/10.1016/j.jss.2016.06.007},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Technical debt, Software architecture, Software maintenance, Modularity, Complexity},
	Number = {Supplement C},
	Pages = {170 - 182},
	Title = {Technical debt and system architecture: The impact of coupling on defect-related activity},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121216300760},
	Volume = {120},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121216300760},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2016.06.007}}

@article{YLIHUUMO2016195,
	Abstract = {Abstract Technical debt (TD) is a metaphor for taking shortcuts or workarounds in technical decisions to gain short-term benefit in time-to-market and earlier software release. In this study, one large software development organization is investigated to gather empirical evidence related to the concept of technical debt management (TDM). We used the exploratory case study method to collect and analyze empirical data in the case organization by interviewing a total of 25 persons in eight software development teams. We were able to identify teams where the current strategy for TDM was only to fix TD when necessary, when it started to cause too much trouble for development. We also identified teams where the management had a systematic strategy to identify, measure and monitor TD during the development process. It seems that TDM can be associated with a similar maturity concept as software development in general. Development teams may raise their maturity by increasing their awareness and applying more advanced processes, techniques and tools in TDM. TDM is an essential part of sustainable software development, and companies have to find right approaches to deal with TD to produce healthy software that can be developed and maintained in the future.},
	Author = {Jesse Yli-Huumo and Andrey Maglyas and Kari Smolander},
	Doi = {https://doi.org/10.1016/j.jss.2016.05.018},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Technical debt, Technical debt management, Exploratory case study},
	Number = {Supplement C},
	Pages = {195 - 218},
	Title = {How do software development teams manage technical debt? -- An empirical study},
	Url = {http://www.sciencedirect.com/science/article/pii/S016412121630053X},
	Volume = {120},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S016412121630053X},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2016.05.018}}

@article{li2016architecture,
	Author = {Li, Zengyang and Liang, Peng and Avgeriou, Paris},
	Title = {Architecture viewpoints for documenting architectural technical debt},
	Year = {2016}}

@article{li2014architectural,
	Author = {Li, Zengyang and Liang, Peng and Avgeriou, Paris},
	Journal = {Economics-Driven Software Architecture, Elsevier},
	Pages = {183--204},
	Title = {Architectural debt management in value-oriented architecting},
	Year = {2014}}

@book{bass2007software,
	Author = {Bass, Len},
	Publisher = {Pearson Education India},
	Title = {Software architecture in practice},
	Year = {2007}}

@book{witten2016data,
	Author = {Witten, Ian H and Frank, Eibe and Hall, Mark A and Pal, Christopher J},
	Publisher = {Morgan Kaufmann},
	Title = {Data Mining: Practical machine learning tools and techniques},
	Year = {2016}}

@article{LI2015193,
	Abstract = {Abstract Technical debt (TD) is a metaphor reflecting technical compromises that can yield short-term benefit but may hurt the long-term health of a software system. This work aims at collecting studies on TD and TD management (TDM), and making a classification and thematic analysis on these studies, to obtain a comprehensive understanding on the TD concept and an overview on the current state of research on TDM. A systematic mapping study was performed to identify and analyze research on TD and its management, covering publications between 1992 and 2013. Ninety-four studies were finally selected. TD was classified into 10 types, 8 TDM activities were identified, and 29 tools for TDM were collected. The term ``debt'' has been used in different ways by different people, which leads to ambiguous interpretation of the term. Code-related TD and its management have gained the most attention. There is a need for more empirical studies with high-quality evidence on the whole TDM process and on the application of specific TDM approaches in industrial settings. Moreover, dedicated TDM tools are needed for managing various types of TD in the whole TDM process.},
	Author = {Zengyang Li and Paris Avgeriou and Peng Liang},
	Doi = {https://doi.org/10.1016/j.jss.2014.12.027},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Systematic mapping study, Technical debt, Technical debt management},
	Number = {Supplement C},
	Pages = {193 - 220},
	Title = {A systematic mapping study on technical debt and its management},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121214002854},
	Volume = {101},
	Year = {2015},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121214002854},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2014.12.027}}

@phdthesis{Aniche2016CBCQA,
	Abstract = {Two tasks that software engineers constantly perform are writing code that is easy to evolve and maintain, and detecting poorly written pieces of code. For the former, software engineers commonly rely on well-known software architecture styles, such as Model-View-Controller (MVC). To the latter, they rely on code metrics and code smell detection approaches. However, up to now, these code metrics and code smell approaches do not take into account underlying architectureall classes are assessed as if they were the same. In practice, software developers know that classes differ in terms of responsibilities and implementation, and thus, we expect these classes to present different levels of coupling, cohesion, and complexity. As an example, in an MVC system, Controllers are responsible for the flow between the Model and the View, and Models are responsible for representing the systems business concepts. Thus, in this thesis, we evaluate the impact of architectural roles within a system architecture on code metrics and code smells. We performed an empirical analysis in 120 open source systems, and interviewed and surveyed more than 50 software developers. Our findings show that each architectural role has a different code metric values distribution, which is a likely consequence of their specific responsibilities. Thus, we propose SATT, an approach that provides specific thresholds for architectural roles that are significantly different from others in terms of code smells. We also show that classes that play a specific architectural role contain specific code smells, which developers perceive as problems, and can impact class' change- and defect-proneness. Based on our findings, we suggest that developers understand the responsibilities of each architectural role in their system architecture, so that code metrics and code smells techniques can provide more accurate feedback.},
	Author = {Mauricio Finavaro Aniche},
	School = {Instituto de Matem{\'a}tica e Estat{\'\i}stica, Universidade de S{\~a}o Paulo},
	Title = {Context-based code quality assessment},
	Type = {phdthesis},
	Year = {2016}}

@book{keyes2004software,
	Author = {Keyes, Jessica},
	Publisher = {CRC Press},
	Title = {Software configuration management},
	Year = {2004}}

@book{Mistrik:2014:ESA:2671146,
	Abstract = {Economics-driven Software Architecture presents a guide for engineers and architects who need to understand the economic impact of architecture design decisions: the long term and strategic viability, cost-effectiveness, and sustainability of applications and systems. Economics-driven software development can increase quality, productivity, and profitability, but comprehensive knowledge is needed to understand the architectural challenges involved in dealing with the development of large, architecturally challenging systems in an economic way.},
	Address = {San Francisco, CA, USA},
	Author = {Mistrik, Ivan and Bahsoon, Rami and Kazman, Rick and Zhang, Yuanyuan},
	Edition = {1st},
	Isbn = {0124104649, 9780124104648},
	Publisher = {Morgan Kaufmann Publishers Inc.},
	Title = {Economics-Driven Software Architecture},
	Year = {2014}}
